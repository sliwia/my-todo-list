{"ast":null,"code":"import * as actionTypes from './actions';\nlet myToDoListStr = localStorage.getItem(\"myToDoList\");\nlet myToDoListStrArray;\n\nif (myToDoListStr === null || myToDoListStr === undefined || myToDoListStr === '') {\n  myToDoListStrArray = []; // localStorage.setItem('myToDoList', '{}');\n} else {\n  myToDoListStrArray = JSON.parse(myToDoListStr);\n}\n\n;\nconst initialState = {\n  mainToDoList: myToDoListStrArray\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_NEW_TICKET:\n      const newTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n      const newList = [...state.mainToDoList, newTicket];\n      localStorage.setItem('myToDoList', JSON.stringify(newList));\n      return { ...state,\n        mainToDoList: newList\n      };\n\n    case actionTypes.EDIT_TICKET:\n      const newListBeforeUpdatedElement = state.mainToDoList.filter(element => element.id !== action.newId);\n      const newUpdatedTicketTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n      const newListWithUpdatedTicket = [...newListBeforeUpdatedElement, newUpdatedTicketTicket];\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithUpdatedTicket));\n      return { ...state,\n        mainToDoList: newListWithUpdatedTicket\n      };\n\n    case actionTypes.DELETE_TICKET:\n      const newListWithDeletedElement = state.mainToDoList.filter(element => element.id !== action.idToDelete);\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithDeletedElement));\n      return { ...state,\n        mainToDoList: newListWithDeletedElement\n      };\n\n    default:\n      console.log(\"not found action.type: \" + action.type);\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/liwia/Documents/Prywatne/rekrutacja/my-todo-list/src/store/reducer.js"],"names":["actionTypes","myToDoListStr","localStorage","getItem","myToDoListStrArray","undefined","JSON","parse","initialState","mainToDoList","reducer","state","action","type","ADD_NEW_TICKET","newTicket","id","newId","number","currentNumber","title","currentTitle","description","currentDescription","status","curentStatus","estimation","currentEstimation","newList","setItem","stringify","EDIT_TICKET","newListBeforeUpdatedElement","filter","element","newUpdatedTicketTicket","newListWithUpdatedTicket","DELETE_TICKET","newListWithDeletedElement","idToDelete","console","log"],"mappings":"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","sourcesContent":["import * as actionTypes from './actions';\n\nlet myToDoListStr = localStorage.getItem(\"myToDoList\");\nlet myToDoListStrArray;\nif (myToDoListStr===null || myToDoListStr===undefined || myToDoListStr==='') {\n  myToDoListStrArray=[];\n  // localStorage.setItem('myToDoList', '{}');\n} else {\n  myToDoListStrArray = JSON.parse(myToDoListStr);\n};\n\nconst initialState = {\n  mainToDoList: myToDoListStrArray\n};\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_NEW_TICKET:\n      const newTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n\n      const newList = [...state.mainToDoList, newTicket]\n      localStorage.setItem('myToDoList', JSON.stringify(newList));\n\n      return {\n        ...state,\n        mainToDoList: newList\n      };\n\n    case actionTypes.EDIT_TICKET:\n      const newListBeforeUpdatedElement = state.mainToDoList.filter( (element) => element.id !== action.newId);\n      const newUpdatedTicketTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n      const newListWithUpdatedTicket = [...newListBeforeUpdatedElement, newUpdatedTicketTicket]\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithUpdatedTicket));\n\n      return {\n        ...state,\n        mainToDoList: newListWithUpdatedTicket\n      };\n\n    case actionTypes.DELETE_TICKET:\n      const newListWithDeletedElement = state.mainToDoList.filter( (element) => element.id !== action.idToDelete);\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithDeletedElement));\n\n      return {\n        ...state,\n        mainToDoList: newListWithDeletedElement\n      };\n\n\n\n    default:\n      console.log(\"not found action.type: \" + action.type)\n  }\n  return state;\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}