{"version":3,"sources":["components/MyToDoList/MyToDoList.js","store/actions.js","components/MainView/MainView.jsx","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["PaperComponent","props","handle","cancel","Paper","connect","state","newToDoList","mainToDoList","dispatch","onNewToDo","id","number","title","estimation","status","description","type","newId","currentNumber","currentTitle","currentEstimation","curentStatus","currentDescription","onEditToDo","onDelToDo","idToDelete","useState","open","setOpen","setCurrentNumber","setCurrentTitle","setCurrentEstimation","currentStatus","setCurrentStatus","setCurrentDescription","isEdit","setIsEdit","editedId","setEditedId","resetFields","handleClose","className","Button","variant","color","onClick","startIcon","AddBox","Dialog","onClose","aria-labelledby","DialogTitle","style","cursor","DialogContent","DialogContentText","TextField","label","onChange","event","target","value","placeholder","multiline","InputLabelProps","shrink","Select","labelId","MenuItem","rows","DialogActions","autoFocus","length","forEach","element","getNextId","map","index","key","Edit","currentData","editTicket","Delete","MainView","Container","maxWidth","App","Boolean","window","location","hostname","match","myToDoListStr","localStorage","getItem","initialState","undefined","JSON","parse","reducer","action","newTicket","newList","setItem","stringify","newListBeforeUpdatedElement","filter","newUpdatedTicketTicket","newListWithUpdatedTicket","newListWithDeletedElement","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2148cd93.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { connect } from 'react-redux';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { AddBox, Delete, Edit } from '@material-ui/icons';\nimport Paper from '@material-ui/core/Paper';\n\nimport * as actionTypes from '../../store/actions';\n\nimport './MyToDoList.scss';\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nconst MyToDoList = ({newToDoList, onNewToDo, onEditToDo, onDelToDo}) => {\n  const [open, setOpen] = useState(false);\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [currentTitle, setCurrentTitle] = useState('');\n  const [currentEstimation, setCurrentEstimation] = useState(0);\n  const [currentStatus, setCurrentStatus] = useState('toDo');\n  const [currentDescription, setCurrentDescription] = useState('');\n  const [isEdit, setIsEdit] = useState(false);\n  const [editedId, setEditedId] = useState(null);\n\n  const handleClickNewTicket = () => {\n    setOpen(true);\n    setIsEdit(false);\n  };\n\n  const resetFields = () => {\n    setIsEdit(false);\n    setCurrentNumber('')\n    setCurrentTitle('')\n    setCurrentEstimation(0);\n    setCurrentStatus('toDo');\n    setCurrentDescription('');\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n    setIsEdit(false);\n    resetFields()\n  };\n\n  const getNextId = () => {\n    if (newToDoList.length) {\n      let newId = 0;\n      newToDoList.forEach((element) => {\n        if (element.id > newId) {\n          newId = element.id\n        }\n\n      })\n      return newId + 1;\n    } else {\n      return 1\n    }\n  };\n\n  const addUpdateTask = () => {\n    if (isEdit) {\n      onEditToDo(editedId, currentNumber, currentTitle, currentEstimation, currentStatus, currentDescription);\n    } else {\n      onNewToDo(getNextId(), currentNumber, currentTitle, currentEstimation, currentStatus, currentDescription);\n    }\n    setIsEdit(false);\n    resetFields()\n    setOpen(false);\n  };\n\n  const handleChangeNumber = (event) => (\n    setCurrentNumber(event.target.value)\n  );\n\n  const handleChangeTitle = (event) => (\n    setCurrentTitle(event.target.value)\n  );\n\n  const handleChangeEstimation = (event) => (\n    setCurrentEstimation(event.target.value)\n  );\n\n  const handleChangeSelect = (event) => (\n    setCurrentStatus(event.target.value)\n  );\n\n  const handleChangeDescription = (event) => (\n    setCurrentDescription(event.target.value)\n  );\n\n  const editTicket = (id) => {\n\n    let currentData;\n    newToDoList.forEach(element => {\n      if (element.id ===id) {\n        currentData = element\n      }\n    });\n    setCurrentNumber(currentData.number)\n    setCurrentTitle(currentData.title)\n    setCurrentEstimation(currentData.estimation);\n    setCurrentStatus(currentData.status);\n    setCurrentDescription(currentData.description)\n    setIsEdit(true);\n    setEditedId(id);\n    setOpen(true);\n  };\n\n  const deleteTicket = (id) => {\n    onDelToDo(id)\n  };\n\n\n  return (\n    <section className='my-todo-list-content'>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className='btn-add'\n        onClick={handleClickNewTicket}\n        startIcon={<AddBox />}\n      >\n        Create ticket\n      </Button>\n      <>\n\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n            Create new ticket\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <form className=\"form-content\">\n                <TextField\n                  id=\"input-number\"\n                  label=\"Number\"\n                  onChange={handleChangeNumber}\n                  value={currentNumber}\n                />\n                <br />\n                <TextField\n                  id=\"input-title\"\n                  label=\"Title\"\n                  placeholder=\"Enter title\"\n                  multiline\n                  onChange={handleChangeTitle}\n                  value={currentTitle}\n                />\n                <br />\n                <TextField\n                  id=\"input-estimation\"\n                  label=\"Estimation\"\n                  onChange={handleChangeEstimation}\n                  type=\"number\"\n                  value={currentEstimation}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n\n                />\n                <br />\n                <label>Status</label>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={currentStatus}\n                  onChange={handleChangeSelect}\n                >\n                  <MenuItem value='toDo'>toDo</MenuItem>\n                  <MenuItem value='inProgress' >inProgress</MenuItem>\n                  <MenuItem value='archive'>archive</MenuItem>\n                  <MenuItem value='done'>done</MenuItem>\n                </Select>\n                <br />\n                <TextField\n                  id=\"input-desc\"\n                  label=\"Description\"\n                  placeholder=\"Enter description\"\n                  multiline\n                  rows={4}\n                  onChange={handleChangeDescription}\n                  value={currentDescription}\n                />\n              </form>\n            </DialogContentText>\n\n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={addUpdateTask} color=\"primary\">\n              Add\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </>\n\n      {\n        newToDoList && newToDoList.map( (element, index) => (\n          <div key={index} className=\"single-ticket\">\n            <h1 className=\"single-ticket__title\">\n              <span>{element.number}</span> {element.title}\n            </h1>\n            <div className=\"single-ticket__details\">\n              <span>Status: {element.status}</span>\n              <span>Estimation: {element.estimation} SP</span>\n            </div>\n            <div className=\"single-ticket__desc\">\n              <span><i>Description:</i> </span>\n              <span>{element.description}</span>\n            </div>\n\n            <div className=\"btns-content\">\n              <Button\n                color=\"primary\"\n                className='btn-another'\n                startIcon={<Edit />}\n                variant=\"outlined\"\n                onClick={() => editTicket(element.id)}\n              >\n                EDIT\n              </Button>\n\n              <Button\n                color=\"primary\"\n                className='btn-another'\n                startIcon={<Delete />}\n                variant=\"outlined\"\n                onClick={() => deleteTicket(element.id)}\n              >\n                DELETE\n              </Button>\n            </div>\n          </div>\n\n        ))\n      }\n    </section>\n  );\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    newToDoList: state.mainToDoList,\n  };\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return {\n    onNewToDo: (id, number, title, estimation, status, description) => dispatch({type: actionTypes.ADD_NEW_TICKET,\n                                                        newId: id,\n                                                        currentNumber: number,\n                                                        currentTitle: title,\n                                                        currentEstimation: estimation,\n                                                        curentStatus: status,\n                                                        currentDescription: description}),\n    onEditToDo: (id, number, title, estimation, status, description) => dispatch({type: actionTypes.EDIT_TICKET,\n                                                        newId: id,\n                                                        currentNumber: number,\n                                                        currentTitle: title,\n                                                        currentEstimation: estimation,\n                                                        curentStatus: status,\n                                                        currentDescription: description}),\n    onDelToDo: (id) => dispatch({\n      type: actionTypes.DELETE_TICKET,\n      idToDelete: id\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyToDoList);\n","export const ADD_NEW_TICKET = 'ADD_NEW_TICKET';\nexport const DELETE_TICKET = 'DELETE_TICKET';\nexport const EDIT_TICKET = 'EDIT_TICKET';\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport MyToDoList from \"../MyToDoList/MyToDoList\";\n\nimport './MainView.scss';\n\nconst MainView = () => {\n  return (\n    <Container maxWidth=\"md\">\n    <header>\n      <h1> Welcome on your website !</h1>\n      <p>You can prepare your own list of tasks :)</p>\n    </header>\n    <MyToDoList />\n    <footer>&copy; 2020 Liwia</footer>\n    </Container>\n  );\n}\n\nexport default MainView;\n","import React from 'react';\n\nimport MainView from './components/MainView/MainView';\n\nfunction App() {\n  return (\n    <>\n      <MainView />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions';\n\nlet myToDoListStr = localStorage.getItem(\"myToDoList\");\nlet myToDoListStrArray;\nif (myToDoListStr===null || myToDoListStr===undefined || myToDoListStr==='') {\n  myToDoListStrArray=[];\n  // localStorage.setItem('myToDoList', '{}');\n} else {\n  myToDoListStrArray = JSON.parse(myToDoListStr);\n};\n\nconst initialState = {\n  mainToDoList: myToDoListStrArray\n};\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_NEW_TICKET:\n      const newTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n\n      const newList = [...state.mainToDoList, newTicket]\n      localStorage.setItem('myToDoList', JSON.stringify(newList));\n\n      return {\n        ...state,\n        mainToDoList: newList\n      };\n\n    case actionTypes.EDIT_TICKET:\n      const newListBeforeUpdatedElement = state.mainToDoList.filter( (element) => element.id !== action.newId);\n      const newUpdatedTicketTicket = {\n        id: action.newId,\n        number: action.currentNumber,\n        title: action.currentTitle,\n        description: action.currentDescription,\n        status: action.curentStatus,\n        estimation: action.currentEstimation\n      };\n      const newListWithUpdatedTicket = [...newListBeforeUpdatedElement, newUpdatedTicketTicket]\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithUpdatedTicket));\n\n      return {\n        ...state,\n        mainToDoList: newListWithUpdatedTicket\n      };\n\n    case actionTypes.DELETE_TICKET:\n      const newListWithDeletedElement = state.mainToDoList.filter( (element) => element.id !== action.idToDelete);\n      localStorage.setItem('myToDoList', JSON.stringify(newListWithDeletedElement));\n\n      return {\n        ...state,\n        mainToDoList: newListWithDeletedElement\n      };\n\n\n\n    default:\n      console.log(\"not found action.type: \" + action.type)\n  }\n  return state;\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}